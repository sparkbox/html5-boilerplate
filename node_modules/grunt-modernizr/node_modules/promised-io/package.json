{
  "name": "promised-io",
  "version": "0.3.0",
  "author": {
    "name": "Kris Zyp"
  },
  "description": "Promise-based IO",
  "licenses": [
    {
      "type": "AFLv2.1",
      "url": "http://trac.dojotoolkit.org/browser/dojo/trunk/LICENSE#L43"
    },
    {
      "type": "BSD",
      "url": "http://trac.dojotoolkit.org/browser/dojo/trunk/LICENSE#L13"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/kriszyp/promised-io"
  },
  "contributors": [
    {
      "name": "Dean Landolt"
    },
    {
      "name": "Nathan Stott",
      "email": "nathan.stott@whiteboard-it.com"
    },
    {
      "name": "Mark Wubben",
      "email": "mark@novemberborn.net"
    },
    {
      "name": "Vladimir Dronnikov",
      "email": "dronnikov@gmail.com"
    }
  ],
  "keywords": [
    "promise",
    "io"
  ],
  "mappings": {
    "patr": "http://github.com/kriszyp/patr/zipball/v0.2.5"
  },
  "directories": {
    "lib": "."
  },
  "main": "./promise",
  "devDependencies": {
    "patr": ">0.2.6",
    "vows": ">=0.5.10"
  },
  "readme": "Promised-IO is a cross-platform package for asynchronous promise-based IO. Promises\nprovide a simple robust mechanism asynchronicity with separation of concerns by encapsulating\neventual completion of an operation with side effect free callback registration\nseparate from call invocation. Promised-IO provides cross-platform \nfile, HTTP, and system interaction with promises for asynchronous operations.\n\nPromised-IO also utilizes \"lazy arrays\" for progressively completed \nactions or for streaming of data. Lazy arrays provide all the standard iterative Array methods for\nreceiving callbacks as actions are completed. Lazy arrays are utilized\nfor progressive loading of files and HTTP responses.\n\n# promise\n\nThe promise module provides the primary tools for creating new promises and interacting\nwith promises. The promise API used by promised-io is the [Promises/A](http://wiki.commonjs.org/wiki/Promises/A)\nproposal used by Dojo, jQuery, and other toolkits. Within promised-io, a promise is \ndefined as any object that implements the Promises/A API, that is they provide a\nthen() method that can take a callback. The then() methods definition is:\n\n    promise.then(fulfilledHandler, errorHandler);\n\nPromises can originate from a variety of sources, and promised-io provides a constructor, Deferred,\nto create promises.\n\n## when\n\n\twhen = require(\"promised-io/promise\");\n\twhen(promiseOrValue, fulfilledHandler, errorHandler);\n\t\nYou can pass a promise to the when() function and the fulfillment and error handlers will be registered for it's\ncompletion *or* you can pass a regular value, and the fulfillment handler will be \nimmediately be called. The when function is a staple of working with promises because\nit allows you to write code that normalizes interaction with synchronous values and asynchronous promises.\nIf you pass in a promise, a new promise for the result of execution of the callback handler\nwill be returned. If you pass a normal value, the return value will be the value returned\nfrom the fulfilledHandler.\n\n## Deferred\n\n\tdeferred = require(\"promised-io/promise\").Deferred(canceler);\n\nThe Deferred constructor is the primary mechanism for creating new promises. The Deferred\nobject is a form of a promise that with an interface for fulfilling or rejecting the promise.\nA Deferred object is a means for a producer to resolve a promise and it also provides\na promise for consumers that are listening for the resolution of the promise. The basic\nusage pattern looks like:\n\n\tvar Deferred = require(\"promised-io/promise\").Deferred;\n    function delay(ms, value){\n    \t// create a new Deferred\n    \tvar deferred = new Deferred();\n    \tsetTimeout(function(){\n    \t\t// fulfill the deferred/promise, all listeners to the promise will be notified, and \n    \t\t// provided the value as the value of the promise \n    \t\tdeferred.fulfill(value);\n    \t}, ms);\n    \t// return the promise that is associated with the Deferred object\n    \treturn deferred.promise;\n    }\n\nThe Deferred can optional take a canceler function. This function will cause resulting\npromises to have a cancel() method, and if the cancel() method is called, the \nDeferred will be canceled and the canceler function will be called.\n\nThe Deferred object has the following methods and properties:\n\n### fulfill\n\n    deferred.fulfill(value);\n\nThis will fulfill the Deferred's promise with the provided value. The fulfillment listeners to the promise\nwill be notified.\n\n### reject\n\n    deferred.reject(error);\n\nThis will reject the Deferred's promise with the provided error. The error listeners to the promise\nwill be notified.\n\n### promise\n\nThis is the promise object associated with the Deferred instance. The promise object \nwill not have any of the Deferred's fulfill or reject methods, and only provides an interface\nfor listening. This can be safely provided to consumers without any chance of being modified.\n\n### cancel\n\n    deferred.cancel();\n\nThis will cancel the Deferred.\n \n## currentContext\n\nOne of the challenges with working asynchronous code is that there can be times when\nyou wish for some contextual state information to be preserved across multiple\nasynchronous actions, without having to actually pass the state to each function in\nthe asynchronous chain. A common examples of such contextual state would be tracking\nthe current transaction, or the currently logged in user. Such state information could be \nstored in a singleton (a module property or a global variable), but with asynchronous\nactions being interleaved, this is unsuitable for tracking state across asynchronous continuations\nof an action. \n\nThe promised-io package's promise module provides a facility for tracking state across\nasynchronous operations. The promise module tracks the \"currentContext\" global variable,\nand whatever value that was in the variable at the time a promise was created\nwill be restored when that promise is fulfilled (or rejected). \n\n## all\n\n\tgroup = require(\"promised-io/promise\").all(arrayOfPromises);\n\nThe all() function can be passed an array of promises, or multiple promises as individual\narguments, and all() will return a new promise that represents the completed values when all the promises\nhave been fulfilled. This allows you to easily run multiple asynchronous actions, and wait\nfor the completion (\"join\") of all the actions. For example:\n \n\tgroup = all(promise1, promise2, promise3);\n\tgroup.then(function(array){\n\t\tvar value1 = array[0]; // result of promise1\n\t\tvar value2 = array[1]; // result of promise2\n\t\tvar value3 = array[2]; // result of promise3\n\t});\n\n## first\n\n\tfirst = require(\"promised-io/promise\").first(arrayOfPromises);\n\nThe first() function can be passed an array of promises, or multiple promises as individual\narguments, and first() will return a new promise that represents the completed value when the first promise\nis fulfilled. This allows you to run multiple asynchronous actions get the first result. For example:\n \n\tresponse = first(requestToMainSite, requestToMirrorSite1, requestToMirrorSite2);\n\tresponse.then(function(response){\n\t\t// response from the first site to respond\n\t});\n\n## seq\n\n\tresult = require(\"promised-io/promise\").seq(arrayOfActionFunctions, startingValue);\n\nThe seq() function can be passed an array of functions, and seq() will execute each function\nin sequence, waiting for the promise returned from each one to complete before executing\nthe next function. Each function will be called with the result of the last function (or the\nstartingValue for the first function).\n\n## whenPromise\n\n\tresultPromise = require(\"promised-io/promise\").whenPromise(valueOrPromise, fulfillmentHandler, errorHandler); \n\nThe whenPromise() function behaves exactly like when() except that whenPromise\nwill always return a promise, even if a non-promise value is passed in.\n\n## allKeys\n\n\tgroup = require(\"promised-io/promise\").allKeys(hashOfPromises);\n\nTakes a hash of promises and returns a promise that is fulfilled once all the promises in the hash keys are fulfilled.\n\n# fs\n\t\nThis module provides promise-based access to the filesystem. The API of the fs module\nbasically follows the [Node File System module API](http://nodejs.org/docs/latest/api/fs.html).\nEach of the asynchronous functions in the Node's FS API is reflected with a corresponding \nfunction in the fs module that returns a promise (instead of requiring a callback argument in the initial call).\nFor example, where Node has fs.rename(path1, path2, [callback]), with promised-io\nyou would call it:\n\n\tvar fs = require(\"promised-io/fs\").fs;\n\tfs.rename(path1, path2).then(function(){\n\t\t// finished renaming\n\t}); \n\nOne function that does differ from NodeJS's fs module is the open() function.\n\n## open\n\n\tvar file = require(\"promised-io/fs\").open(path, mode);\n\nThe open() function differs from simply being a promise-based version of the Node's\nopen() function in that it immediately returns (even though the opening of the\nfile is asynchronous) a file object that be used to read from and write to the file.\n\nTo write to the file object, we can write:\n\n\tpromiseForCompletion = file.write(contents, options, encoding);\n\nTo close the file object, we can write:\n\n\tpromiseForCompletion = file.close();\n\nWe can also use file.writeSync and file.closeSync for the synchronous versions of these\nfunctions.\n\nThe file object is also a lazy array, which means you can read from the file using \nstandard array methods. To asynchronously read the contents of a file, you can do:\n \n\tfile.forEach(function(chunk){\n\t\t// called for each chunk of the file until the end of the file is reached.\n\t});\n\n# lazy-array\n\nThe lazy-array module provides the functionality for creating and using lazy arrays,\nwhich are objects that implement the interface of the standard iterative array methods for accessing\nstreams of data. Array methods can be called and they will be\nasynchronously executed as data is available. Lazy arrays are powerful way to model\nasynchronous streams since they can used like other JavaScript arrays.\n\nTypically you don't need to directly use this module, rather other IO modules like the \nfile system (fs) and HTTP (http-client) modules provide lazy arrays that you can interact\nwith. For example, we could search through a file for the string \"lazy\" and stop reading\nonce we find it using the standard some() method:\n\n\tif(file.some(function(chunk){\n\t\treturn chunk.toString().indexOf(\"lazy\") > -1;\n\t}));\n\nLazy arrays include the follow standard array methods, providing access to the data\nas the stream data becomes available:\n\n* filter\n* every\n* some\n* forEach\n* concat\n* map\n\nAnd also these standard methods, although these must fully fetch the stream:\n\n* join\n* sort\n* reverse\n\nAlso the following additional methods are available on lazy arrays:\n\n* toRealArray() - This will fetch all the data and return it as a real JavaScript array.\n* get(index) - This retrieves an element by index.\n\n## LazyArray\n\n\tlazyArray = require(\"promised-io/lazy-array\").LazyArray({\n\t\tsome: someImplementation,\n\t\tlength: arrayLength\n\t});\n\nThis function is a constructor for creating your own lazy arrays. With this function,\nyou don't need to implement the entire set of array methods, you can just implement\nthe some() method and provide an array length, if it is known.\n\n## first\n\n\tfirst = require(\"promised-io/lazy-array\").first(lazyArray);\n\t\nThis function returns the first element in a lazy array.\n\n## last\n\n\tlast = require(\"promised-io/lazy-array\").last(lazyArray);\n\t\nThis function returns the last element in a lazy array.\n\n## get\n\n\titem = require(\"promised-io/lazy-array\").get(index);\n\t\nThis function returns the an element by index from a lazy array.\n\n# http-client\n\nThis module provides convenient promise-based access to making HTTP requests.\n\nPromised-IO is part of the Persevere project, and therefore is licensed under the\nAFL or BSD license. The Persevere project is administered under the Dojo foundation,\nand all contributions require a Dojo CLA.",
  "_id": "promised-io@0.3.0",
  "_from": "promised-io@>=0.3.0"
}
