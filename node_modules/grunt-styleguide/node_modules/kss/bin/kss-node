#!/usr/bin/env node

'use strict';

var optimist = require('optimist'),
    path = require('path'),
    wrench = require('wrench'),

    kss = require(__dirname + '/../lib/kss.js'),

	KSS_FAILED = false,
    options = {},
    argv;

/**
 * CLI argument parsing, thanks to Substack's optimist.
 * @type {Object}
 */
argv = optimist

	.usage('Usage:\n $0 sourcedir [destdir] --less [file] --css [file] --init [directory]')
	.check(function(args) {
		if (args._.length < 1 && !args.init) {
			throw new Error('Please provide a source directory');
		}
	})
	.string('l')
	.alias('l', 'less')
	.describe('l', 'Compile and include a LESS stylesheet')

	.string('c')
	.alias('c', 'css')
	.describe('c', 'Compile and include a CSS stylesheet')

	.string('t')
	.alias('t', 'template')
	.describe('t', 'Use a custom template to build your styleguide')

	.alias('i', 'init')
	.describe('i', 'Create a new styleguide template to work from')

	.argv;

// Create a new styleguide template to play with using the `--init` tag.
if (argv.init) {
	if (typeof argv.init !== 'string') {
		argv.init = path.resolve('./styleguide-template');
	} else {
		argv.init = path.resolve(argv.init);
	}

	console.log('Creating a new styleguide template...');
	wrench.copyDirSyncRecursive( __dirname + '/../lib/template', argv.init );
	console.log('You can change it as you like, and use it with your styleguide like so:');
	console.log('');
	console.log('kss-node [sourcedir] --template "'+argv.init+'"');
	console.log('');
	return;
}

options.sourceDirectory = path.relative(process.cwd(), argv._[0]);

if (argv._.length > 1) {
	options.destinationDirectory = path.relative(process.cwd(), argv._[1]);
}
if (argv.template) {
	options.templateDirectory = path.relative(process.cwd(), argv.template);
}

console.log('');
console.log('Generating your KSS Styleguide!');
console.log('');
console.log(' * Source: ' + path.resolve(options.sourceDirectory));
console.log(' * Destination: ' + path.resolve(options.destinationDirectory));
console.log(' * Template: ' + path.resolve(options.templateDirectory));
console.log('');

kss.generate(options, argv);

process.on('exit', function() {
	if (!KSS_FAILED) {
		console.log('');
		console.log('Generation completed successfully!');
		console.log('');
	}
});

process.on('uncaughtException', function(err) {
	console.log(err.message);
	KSS_FAILED = true;
	process.exit(1);
});
